---
- name: Configure repository
  include_tasks: ../../../tasks/install_percona_release.yml

- name: Setting facts so that they will be persisted in the fact cache
  ansible.builtin.set_fact:
    pg_version_to_install: "{{ lookup('env', 'FROM_VERSION') | replace('ppg-','') }}"

- name: End play on Ubuntu 24
  meta: end_play
  when: ansible_distribution == "Ubuntu" and
   ansible_distribution_major_version == "24" and
   pg_version_to_install | string is version('16.2', '<=', strict=True)

- name: Setup initial (old) repository
  command: percona-release enable {{ pg_version }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'FROM_REPO') }}"
    pg_version: "{{ lookup('env', 'FROM_VERSION') }}"

- name: install Percona Platform for PostgreSQL 17 packages
  include_tasks: ../../../../tasks/install_ppg17.yml

- name: Initialize Postgres RHEL
  command: /usr/pgsql-17/bin/postgresql-17-setup initdb
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "RedHat"

- name: Install PPG tools
  include_tasks: ../../../../tasks/install_ppg17_tools.yml

- name: Start Postgres RHEL
  service:
    name: postgresql-17
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"

- name: Start postgresql service for Debian based
  service:
    name: postgresql
    state: started
    enabled: true
  when: ansible_os_family == "Debian"

- name: Disable old repository
  command: percona-release disable {{ pg_version }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'FROM_REPO') }}"
    pg_version: "{{ lookup('env', 'FROM_VERSION') }}"

- name: Setup new repository
  command: percona-release enable {{ pg_version }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'TO_REPO') }}"
    pg_version: "{{ lookup('env', 'VERSION') }}"

- name: install Percona Platform for PostgreSQL deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
    state: latest
  vars:
    packages:
      - percona-postgresql
      - percona-postgresql-17
      - percona-postgresql-all
      - percona-postgresql-client
      - percona-postgresql-client-17
      - percona-postgresql-common
      - percona-postgresql-contrib
      - percona-postgresql-doc
      - percona-postgresql-doc-17
      - percona-postgresql-plperl-17
      - percona-postgresql-plpython3-17
      - percona-postgresql-pltcl-17
      - percona-postgresql-server-dev-17
      - percona-postgresql-server-dev-all
      - percona-postgresql-17-dbgsym
      - percona-postgresql-client-17-dbgsym
      - percona-postgresql-plperl-17-dbgsym
      - percona-postgresql-plpython3-17-dbgsym
      - percona-postgresql-pltcl-17-dbgsym
      - postgresql-client-common
      - postgresql-common

  when: ansible_os_family == "Debian"
  environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

- name: install Percona Platform for PostgreSQL deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
    state: latest
  vars:
    packages:
    - percona-postgresql-plpython3-17
    - percona-postgresql-plpython3-17-dbgsym
  when:
    - ansible_os_family == "Debian"

- name: install Percona Platform for PostgreSQL rpm packages for RHEL
  yum:
    name: "{{ packages }}"
    state: latest
    update_cache: yes
  vars:
    packages:
      - percona-postgresql-client-common
      - percona-postgresql-common
      - percona-postgresql-server-dev-all
      - percona-postgresql17
      - percona-postgresql17-contrib
      - percona-postgresql17-debuginfo
      - percona-postgresql17-devel
      - percona-postgresql17-docs
      - percona-postgresql17-libs
      - percona-postgresql17-llvmjit
      - percona-postgresql17-plperl
      - percona-postgresql17-plpython3
      - percona-postgresql17-pltcl
      - percona-postgresql17-server
      - percona-postgresql17-test
      - percona-postgresql17-debuginfo
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"
  environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

- name: install Percona Platform for PostgreSQL rpm packages for RHEL
  yum:
    name: "{{ packages }}"
    state: latest
    update_cache: yes
  vars:
    packages:
        - percona-postgresql-client-common
        - percona-postgresql-common
        - percona-postgresql-server-dev-all
        - percona-postgresql17
        - percona-postgresql17-contrib
        - percona-postgresql17-debuginfo
        - percona-postgresql17-devel
        - percona-postgresql17-docs
        - percona-postgresql17-libs
        - percona-postgresql17-llvmjit
        - percona-postgresql17-plpython3
        - percona-postgresql17-plperl
        - percona-postgresql17-pltcl
        - percona-postgresql17-server
        - percona-postgresql17-test
        - percona-postgresql17-contrib-debuginfo
        - percona-postgresql17-debuginfo
        - percona-postgresql17-debugsource
        - percona-postgresql17-devel-debuginfo
        - percona-postgresql17-libs-debuginfo
        - percona-postgresql17-plperl-debuginfo
        - percona-postgresql17-pltcl-debuginfo
        - percona-postgresql17-plpython3-debuginfo
        - percona-postgresql17-server-debuginfo
  when: ansible_os_family == "RedHat" and
      (ansible_distribution_major_version == "8" or ansible_distribution_major_version == "9")
  environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

- name: Stop postgresql service for RHEL based
  service:
    name: postgresql-17
    state: stopped
  when: ansible_os_family == "RedHat"

- name: Stop postgresql service for Debian based
  service:
    name: postgresql
    state: stopped
  when: ansible_os_family == "Debian"

- pause:
    minutes: 1

- name: Start postgresql service for RHEL based
  service:
    name: postgresql-17
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"

- name: Start postgresql service for Debian based
  service:
    name: postgresql
    state: started
    enabled: true
  when: ansible_os_family == "Debian"

- name: Display ppg version
  become_user: postgres
  shell: psql -c "select version()"
  register: results

- debug: var=results.stdout_lines

