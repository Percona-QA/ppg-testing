---
  - name: setup epel release
    yum:
      name: epel-release
      update_cache: yes
      state: present

  - name: Clean dnf RHEL8
    become: true
    command: dnf clean all -y
    when: ansible_distribution_major_version == "8"

  # - name: Install epel-release package
  #   ansible.builtin.dnf:
  #     name: epel-release
  #     state: present
  #   when: ansible_facts['distribution'] == "Rocky" and ansible_facts['distribution_major_version'] == "8"

  # - name: End play on Rocky 8 -Temporary
  #   meta: end_play
  #   when: ansible_distribution_major_version == "8" and ansible_architecture == 'aarch64'

  - name: Enable Powertools on Rocky 8
    become: true
    shell: | 
       dnf install -y dnf-plugins-core
       dnf config-manager --set-enabled powertools
    when: ansible_distribution_major_version == "8"

  - name: Enable CRB on Rocky 9
    become: true
    shell: | 
       dnf install dnf-plugins-core
       dnf config-manager --set-enabled crb
    when: ansible_distribution_major_version == "9"    

  - name: Add the user 'postgres'
    ansible.builtin.user:
      name: postgres
      shell: /bin/bash
      uid: 1040
      group: wheel

  - name: Creates directory
    ansible.builtin.file:
      path: /opt/pgsql
      state: directory
      owner: postgres
      group: wheel
      mode: 0775

  - name: Creates directory
    ansible.builtin.file:
      path: /opt/pgsql/data
      state: directory
      owner: postgres
      group: wheel
      mode: 0775      

  - name: Install perl-CPAN and perl-App-cpanminus on Red Hat
    become: true
    yum:
      name: "{{ item }}"
      state: present
    loop:
      - perl-CPAN
      - perl-App-cpanminus
      - perl-IPC-Run

  - name: Install perl module Text::Trim
    become: true
    command: cpanm Text::Trim
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  - name: Install Development tools
    become: true
    command: yum -y groupinstall "Development tools"
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  - name: Enable llvm-toolset dnf module for RHEL8
    become: true
    command: dnf module enable llvm-toolset -y
    when: ansible_distribution_major_version == "8"

  - name: Install llvm-toolset
    become: true
    command: yum install -y llvm-toolset clang-devel clang
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_distribution_major_version == "8"

  - name: Install clang clang-devel on RHEL 9
    become: true
    command: yum install -y clang-devel clang
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_distribution_major_version == "9"

  - name: LLVM Version
    command: llvm-config --version
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: CLANG Version
    command: clang --version
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 1
    command: rpm -qi systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 2
    command: yum -v search systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: install tools
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - clang
      - zlib-devel
      - readline-devel
      - gcc
      - lz4
      - lz4-devel
      - python3
      - krb5-devel
      - openssl-devel
      - pam-devel
      - libxml2-devel
      - libxslt-devel
      - openldap-devel
      - libuuid-devel
      - systemd-devel
      - tcl-devel
      - python3-devel
      - libicu-devel
      - libzstd
      - libzstd-devel
      - llvm
      - llvm-toolset
      - llvm-devel
      - clang-devel
      - vim
      - git
      - perl-ExtUtils*
      - docbook-xsl
      - perl-IPC-Run
      - perl-Test-Simple
      - prename
      - perl-CPAN
      - lcov
      - libcurl-devel
      - perl-App-cpanminus
      - make
      - autoconf
      - json-c-devel
      - python3-pip
      - wget
      - perl-LWP-Protocol-https

  - name: Install cpanm CGI::Session
    become: true
    command: cpanm CGI::Session

  - name: Install HTTP::Server::Simple::CGI
    become: true
    command: cpanm HTTP::Server::Simple::CGI

  - name: Debug 3
    command: rpm -qi systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 4
    command: yum -v search systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 5
    command: yum install -y systemtap-sdt-devel --allowerasing
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Install perl Text-trim
    command: cpanm Text::Trim
    ignore_errors: true
    register: results

  - name: install perl modules for rhel 9
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - perl-FindBin
      - perl-Opcode
    when: ansible_distribution_major_version == "9"

  - name: LLVM Version
    command: llvm-config --version
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: CLANG Version
    command: clang --version
    ignore_errors: true
    register: results

  - name: yum install -y yum-utils
    become: true
    command: yum install -y yum-utils

  - name: yum-config-manager hashicorp repo
    become: true
    command: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

  - name: yum -y install vault
    become: true
    command: yum -y install vault

  - name: Clone Postgres/PSP sources with pg_tde
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/postgres
      track_submodules: true
    vars:
      repo: "{{ lookup('env', 'PSP_REPO') }}"
      version: "{{ lookup('env', 'PSP_BRANCH') }}"
    become_user: postgres

  - name: Submodule update
    command : git submodule update --init --recursive
    args:
      chdir: /tmp/postgres
    become_user: postgres

  # - name: Remove pg_tde from source tree for heap-checkworld
  #   become_user: postgres
  #   command: rm -fr /tmp/postgres/contrib/pg_tde
  #   when: testsuite == 'server-check-world-without-tde'
  #   register: results

  # - debug: var=results.stdout_lines

  # - name: Remove libtde from source tree for heap-checkworld
  #   become_user: postgres
  #   command: rm -fr /tmp/postgres/src/libtde
  #   when: testsuite == 'server-check-world-without-tde'
  #   register: results

  # - debug: var=results.stdout_lines

  # - name: Configure Postgres/PSP from sources
  #   command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql'
  #   args:
  #     chdir: /tmp/postgres
  #   become_user: postgres
  #   register: results

  # - debug: var=results.stdout_lines

  # - name: Configure Postgres/PSP from sources
  #   command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql' \
  #    '--enable-rpath' '--includedir=/opt/pgsql/include' '--mandir=/opt/pgsql/share/man' '--datadir=/opt/pgsql/share' \
  #    '--libdir=/opt/pgsql/lib' '--with-lz4' '--with-extra-version= - Percona Distribution' '--with-zstd' \
  #    '--with-icu' '--with-llvm' '--with-perl' '--with-python' '--with-tcl' '--with-tclconfig=/usr/lib64' \
  #    '--with-openssl' '--with-pam' '--with-gssapi' '--with-includes=/usr/include' '--with-libraries=/usr/lib64' \
  #    '--enable-nls' '--enable-dtrace' '--with-uuid=e2fs' '--with-libxml' '--with-libxslt' '--with-ldap' \
  #    '--with-selinux' '--with-systemd' '--with-system-tzdata=/usr/share/zoneinfo' '--sysconfdir=/etc/sysconfig/pgsql' \
  #    'CFLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' \
  #    'LDFLAGS=-Wl,--as-needed' 'LLVM_CONFIG=/usr/bin/llvm-config' 'CLANG=/usr/bin/clang' \
  #    'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig' 'PYTHON=/usr/bin/python3'
  #   args:
  #     chdir: /tmp/postgres
  #   become_user: postgres
  #   register: results
  #   when: ansible_architecture == 'x86_64'

  # - name: Configure Postgres/PSP from sources
  #   command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql' \
  #    '--enable-rpath' '--includedir=/opt/pgsql/include' '--mandir=/opt/pgsql/share/man' '--datadir=/opt/pgsql/share' \
  #    '--libdir=/opt/pgsql/lib' '--with-lz4' '--with-extra-version= - Percona Distribution' '--with-zstd' \
  #    '--with-icu' '--with-llvm' '--with-perl' '--with-python' '--with-tcl' '--with-tclconfig=/usr/lib64' \
  #    '--with-openssl' '--with-pam' '--with-gssapi' '--with-includes=/usr/include' '--with-libraries=/usr/lib64' \
  #    '--enable-nls' '--enable-dtrace' '--with-uuid=e2fs' '--with-libxml' '--with-libxslt' '--with-ldap' \
  #    '--with-selinux' '--with-systemd' '--with-system-tzdata=/usr/share/zoneinfo' '--sysconfdir=/etc/sysconfig/pgsql' \
  #    'CFLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection' \
  #    'LDFLAGS=-Wl,--as-needed' 'LLVM_CONFIG=/usr/bin/llvm-config' 'CLANG=/usr/bin/clang' \
  #    'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig' 'PYTHON=/usr/bin/python3'
  #   args:
  #     chdir: /tmp/postgres
  #   become_user: postgres
  #   register: results
  #   when: ansible_architecture == 'aarch64'

  - name: Configure Postgres/PSP from sources
    command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql'
    args:
      chdir: /tmp/postgres
    become_user: postgres
    register: results

  - name: Build Postgres/PSP (world) from sources
    make:
      chdir: "/tmp/postgres"
      jobs: 4 
      target: world
    become_user: postgres
    environment:
      TDE_MODE: 1 
    register: results

  - debug: var=results.stdout_lines

  - name: Install Postgres/PSP (install-world) from build binaries
    make:
      chdir: "/tmp/postgres"
      target: install-world 
    environment:
      TDE_MODE: 1 
    register: results

  - debug: var=results.stdout_lines

  - name: Copy pg_config to /usr/bin
    become: true 
    command: sudo cp /opt/pgsql/bin/pg_config /usr/bin

  - name: Remove multiple extensions tap test case from pg_tde
    become_user: postgres
    command: rm -f /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
    register: results

  - debug: var=results.stdout_lines

  - name: Remove create_schema.sql test case for tde_heap
    become_user: postgres
    command: rm -f /tmp/postgres/src/test/regress/sql/create_schema.sql
    when: (testsuite == 'server-installcheck-world-with-tde' or testsuite == 'tde-installcheck-only')
    register: results

  - debug: var=results.stdout_lines

  - name: initdb cluster
    become_user: postgres
    command: ./initdb -D /opt/pgsql/data --set shared_preload_libraries=pg_tde
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: (testsuite == 'server-installcheck-world-with-tde' or testsuite == 'tde-installcheck-only')
    register: results

  - debug: var=results.stdout_lines

  - name: Start Server
    become_user: postgres
    command: ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      TDE_MODE: 1
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
    when: (testsuite == 'server-installcheck-world-with-tde' or testsuite == 'tde-installcheck-only')
    register: results

  - debug: var=results.stdout_lines

  - name: Check pg_tde library output
    become_user: postgres
    shell: | 
      psql -c "select * from pg_available_extensions where name like 'pg_tde';"
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: (testsuite == 'server-installcheck-world-with-tde' or testsuite == 'tde-installcheck-only')
    register: results

  - debug: var=results.stdout_lines

  - name: Check default_table_access_method library output
    become_user: postgres
    shell: | 
      psql -c "show default_table_access_method ;"
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: (testsuite == 'server-installcheck-world-with-tde' or testsuite == 'tde-installcheck-only')
    register: results

  - debug: var=results.stdout_lines

  # - name: Remove pg_tde from source tree for heap-checkworld
  #   become_user: postgres
  #   command: rm -fr /tmp/postgres/contrib/pg_tde
  #   when: testsuite == 'server-check-world-without-tde'
  #   register: results

  - name: Get ulimit on Rocky 8 ARM for postgres user
    become_user: postgres
    command: ulimit -a
    register: results
    when: ansible_distribution_major_version == "8" and ansible_architecture == 'aarch64'

  - debug: var=results.stdout_lines

  - name: Modify memlock, both soft and hard, limit for the user postgres
    community.general.pam_limits:
      domain: postgres
      limit_type: '-'
      limit_item: memlock
      value: 128
      comment: 128kb memory lock for postgres
    when: ansible_distribution_major_version == "8" and ansible_architecture == 'aarch64'

  - debug: var=results.stdout_lines

  - name: Get ulimit on Rocky 8 ARM for postgres user
    become_user: postgres
    command: ulimit -a
    register: results
    when: ansible_distribution_major_version == "8" and ansible_architecture == 'aarch64'

  - debug: var=results.stdout_lines

  # Check-World Server testsuite
  - name: Run server-check-world-without-tde
    shell: | 
      cd /tmp
      python3 -m venv validation
      source validation/bin/activate
      pip install --upgrade pip
      pip install pykmip
      export PATH=$PATH:/tmp/validation/bin
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/bin/create_certificates.py
      python3 create_certificates.py
      cat client_certificate_jane_doe.pem >> client_key_jane_doe.pem
      mkdir policies
      cd policies
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/examples/policy.json
      cd ..
      pykmip-server -f "/tmp/postgres/contrib/pg_tde/pykmip-server.conf" -l /tmp/kmip-server.log &
      TV=$(mktemp)
      { exec >$TV; vault server -dev; } &
      sleep 10
      export ROOT_TOKEN=$(cat $TV | grep "Root Token" | cut -d ":" -f 2 | xargs echo -n)
      echo "Root token: $ROOT_TOKEN"
      export ROOT_TOKEN=$ROOT_TOKEN && cd /tmp/postgres && make -s check-world
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      TDE_MODE: 1
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
    when: testsuite == 'server-check-world-without-tde'
    register: regression

  - debug: var=regression.stdout_lines

  # # Check-World Server testsuite
  # - name: Run server-check-world-without-tde
  #   shell: | 
  #     cd /tmp/postgres && make -s check-world
  #   become_user: postgres
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres/"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: 1
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   when: testsuite == 'server-check-world-without-tde'
  #   register: regression

  # - debug: var=regression.stdout_lines

  # installcheck-world Server testsuite
  - name: Start pg_tde tests only - installcheck
    shell: | 
      psql -c "CREATE SCHEMA tde;"
      psql -c "CREATE EXTENSION IF NOT EXISTS pg_tde SCHEMA tde;"
      psql -c "SELECT tde.pg_tde_add_global_key_provider_file('reg_file-global', '/tmp/pg_tde_test_keyring.per');"
      psql -c "SELECT tde.pg_tde_set_server_principal_key('global-principal-key', 'reg_file-global');"
      psql -c "ALTER SYSTEM SET pg_tde.wal_encrypt = on;"
      psql -c "CREATE EXTENSION IF NOT EXISTS pg_tde;"
      psql -c "ALTER SYSTEM SET search_path = postgres,public,tde;"
      psql -c "SELECT pg_reload_conf();"
      cd /opt/pgsql/bin
      echo "default_table_access_method = 'tde_heap'" >> /opt/pgsql/data/postgresql.conf
      ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile stop -o '-p 5432'
      sleep 5
      ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
      cd /tmp
      python3 -m venv validation
      source validation/bin/activate
      pip install --upgrade pip
      pip install pykmip
      export PATH=$PATH:/tmp/validation/bin
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/bin/create_certificates.py
      python3 create_certificates.py
      cat client_certificate_jane_doe.pem >> client_key_jane_doe.pem
      mkdir policies
      cd policies
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/examples/policy.json
      cd ..
      pykmip-server -f "/tmp/postgres/contrib/pg_tde/pykmip-server.conf" -l /tmp/kmip-server.log &
      TV=$(mktemp)
      { exec >$TV; vault server -dev; } &
      sleep 10
      export ROOT_TOKEN=$(cat $TV | grep "Root Token" | cut -d ":" -f 2 | xargs echo -n)
      echo "Root token: $ROOT_TOKEN"
      export ROOT_TOKEN=$ROOT_TOKEN && cd /tmp/postgres/contrib/pg_tde && EXTRA_REGRESS_OPTS="--extra-setup=/tmp/postgres/ci_scripts/tde_setup.sql" make -s installcheck -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/contrib/pg_tde"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      TDE_MODE: 1
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
    when: testsuite == 'tde-installcheck-only'
    register: regression

  - debug: var=regression.stdout_lines

  # installcheck pg_tde testsuite testsuite
  - name: Start server & pg_tde tests - installcheck-world
    ignore_errors: yes
    shell: | 
      psql -c "CREATE SCHEMA tde;"
      psql -c "CREATE EXTENSION IF NOT EXISTS pg_tde SCHEMA tde;"
      psql -c "SELECT tde.pg_tde_add_global_key_provider_file('reg_file-global', '/tmp/pg_tde_test_keyring.per');"
      psql -c "SELECT tde.pg_tde_set_server_principal_key('global-principal-key', 'reg_file-global');"
      psql -c "ALTER SYSTEM SET pg_tde.wal_encrypt = on;"
      psql -c "CREATE EXTENSION IF NOT EXISTS pg_tde;"
      psql -c "ALTER SYSTEM SET search_path = postgres,public,tde;"
      psql -c "SELECT pg_reload_conf();"
      cd /opt/pgsql/bin
      echo "default_table_access_method = 'tde_heap'" >> /opt/pgsql/data/postgresql.conf
      ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile stop -o '-p 5432'
      sleep 5
      ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
      psql -c "show default_table_access_method ;"
      psql -c "ALTER SYSTEM SET default_table_access_method = 'tde_heap';"
      psql -c "SELECT pg_reload_conf();"
      psql -c "show default_table_access_method ;"
      cd /tmp
      python3 -m venv validation
      source validation/bin/activate
      pip install --upgrade pip
      pip install pykmip
      export PATH=$PATH:/tmp/validation/bin
      cd /tmp
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/bin/create_certificates.py
      python3 create_certificates.py
      cat client_certificate_jane_doe.pem >> client_key_jane_doe.pem
      mkdir policies
      cd policies
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/examples/policy.json
      cd ..
      pykmip-server -f "/tmp/postgres/contrib/pg_tde/pykmip-server.conf" -l /tmp/kmip-server.log &
      TV=$(mktemp)
      { exec >$TV; vault server -dev; } &
      sleep 10
      export ROOT_TOKEN=$(cat $TV | grep "Root Token" | cut -d ":" -f 2 | xargs echo -n)
      echo "Root token: $ROOT_TOKEN"
      export ROOT_TOKEN=$ROOT_TOKEN && export TDE_MODE=1 && cd /tmp/postgres && EXTRA_REGRESS_OPTS="--extra-setup=/tmp/postgres/ci_scripts/tde_setup.sql" make -s installcheck-world -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      TDE_MODE: 1
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
    when: testsuite == 'server-installcheck-world-with-tde'
    register: regression

  - debug: var=regression.stdout_lines

  - stat:
      path: /tmp/postgres/src/test/regress/regression.diffs
    register: server_diff

  # - name: Get Server - regression.diffs contents
  #   ignore_errors: yes
  #   command: cat /tmp/postgres/src/test/regress/regression.diffs
  #   register: command_output
  #   when: output.stat.exists == True

  # - name: Print to console Server - regression.diffs contents
  #   ignore_errors: yes
  #   debug:
  #     msg: "{{command_output.stdout_lines}}"
  #   when: output.stat.exists == True

  # - stat:
  #     path: /tmp/postgres/contrib/pg_tde/regression.diffs
  #   register: output

  # - name: Get pg_tde - regression.diffs contents
  #   ignore_errors: yes
  #   command: cat /tmp/postgres/contrib/pg_tde/regression.diffs
  #   register: command_output
  #   when: output.stat.exists == True

  # - name: Print to console pg_tde - regression.diffs contents
  #   ignore_errors: yes
  #   debug:
  #     msg: "{{command_output.stdout_lines}}"
  #   when: output.stat.exists == True

  - name: Get Server - regression.diffs contents
    command: cat /tmp/postgres/src/test/regress/regression.diffs
    register: command_output
    when: server_diff.stat.isreg is defined and server_diff.stat.isreg == True

  - name: Print to console Server - regression.diffs contents
    debug:
      msg: "{{command_output.stdout_lines}}"
    when: server_diff.stat.isreg is defined and server_diff.stat.isreg == True

  - stat:
      path: /tmp/postgres/contrib/pg_tde/regression.diffs
    register: tde_diff

  - name: Get pg_tde - regression.diffs contents
    command: cat /tmp/postgres/contrib/pg_tde/regression.diffs
    register: command_output
    when: tde_diff.stat.isreg is defined and tde_diff.stat.isreg == True

  - name: Print to console pg_tde - regression.diffs contents
    debug:
      msg: "{{command_output.stdout_lines}}"
    when: tde_diff.stat.isreg is defined and tde_diff.stat.isreg == True

  - name: Get server logfile contents if exists
    command: cat /tmp/postgres/logfile
    register: log_output
    when: regression.rc is defined and regression.rc != 0

  - name: Print to console logfile
    debug:
      msg: "{{log_output.stdout_lines}}"
    when: regression.rc is defined and regression.rc != 0

  - debug: var=regression.rc
    when: regression.rc is defined

  - name: End play if regression has failures
    fail:
      msg: "regression failed"
    when: regression.rc is defined and (regression.rc != 0 and regression.rc != 2)
