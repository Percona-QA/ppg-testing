---
  - name: Set Facts
    set_fact:
      testsuite: "{{ lookup('env', 'TESTSUITE') }}"
      percona_server_version: "{{ lookup('env', 'PERCONA_SERVER_VERSION') }}"
      major_version: "{{ lookup('env', 'VERSION').split('.') }}"
      cacheable: true

  - name: Include Redhat tasks file 
    include_tasks: 
      file: "redhat_tasks.yml"
    when: ansible_os_family == 'RedHat'

  - name: Include Debian tasks file 
    include_tasks: 
      file: "debian_tasks.yml"
    when: ansible_os_family == 'Debian'

  - name: Get ulimit results
    become_user: postgres
    ansible.builtin.shell: ulimit -a
    register: results

  - debug: var=results.stdout_lines

  - name: set ulimit unlimited
    ansible.builtin.shell: ulimit -s unlimited
    become_user: postgres
    become: true
    register: results

  - debug: var=results.stdout_lines

  - name: Get ulimit results
    become_user: postgres
    ansible.builtin.shell: ulimit -a
    register: results

  - debug: var=results.stdout_lines

# =============================
# Clone Postgres/PSP sources with pg_tde
# =============================
  - name: Clone Postgres/PSP sources with pg_tde
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/postgres
      track_submodules: true
    vars:
      repo: "{{ lookup('env', 'PSP_REPO') }}"
      version: "{{ lookup('env', 'PSP_BRANCH') }}"
    become_user: postgres

  - name: Submodule update
    command : git submodule update --init --recursive
    args:
      chdir: /tmp/postgres
    become_user: postgres

  - name: Configure Postgres/PSP from sources
    command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql'
    args:
      chdir: /tmp/postgres
    become_user: postgres
    register: results

  - debug: var=results.stdout_lines

  - name: Run make install-world with parallel jobs
    ansible.builtin.command: make install-world -j
    args:
      chdir: /tmp/postgres
    become_user: postgres
    environment:
      TDE_MODE: 1
    register: results

  - debug: var=results.stdout_lines

  - name: Copy pg_config to /usr/bin
    become: true 
    command: sudo cp /opt/pgsql/bin/pg_config /usr/bin

  - name: Remove multiple extensions tap test case from pg_tde
    become_user: postgres
    command: rm -f /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
    register: results

  - debug: var=results.stdout_lines

  - name: Copy Vault_v2 test output file
    ansible.builtin.copy:
      src: ../../files/vault_v2_test_1.out
      dest: /tmp/postgres/contrib/pg_tde/expected/vault_v2_test_1.out

  # =============================
  # Initialize Postgres with pg_tde
  # Start the Postgres server with pg_tde enabled
  # =============================
  - name: initdb cluster
    become_user: postgres
    command: ./initdb -D /opt/pgsql/data --set shared_preload_libraries=pg_tde
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  - name: Start Server
    become_user: postgres
    command: ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      TDE_MODE: 1
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
    when: testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  - name: Check pg_tde library output
    become_user: postgres
    shell: | 
      psql -c "select * from pg_available_extensions where name like 'pg_tde';"
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  # =============================
  # Clone Percona-QA repo for regression tests
  # This is done to avoid checking out all files in the repo
  # and only include the postgresql directory
  # =============================
  - name: Clone only postgresql directory and copy t files to pg_tde
    block:
      - name: Clone Percona-QA repo without checking out files
        git:
          repo: https://github.com/Percona-QA/percona-qa.git
          dest: /tmp/percona-qa
          bare: no
          clone: yes
          update: no

      - name: Enable sparse checkout
        command: git sparse-checkout init --cone
        args:
          chdir: /tmp/percona-qa

      - name: Set sparse-checkout to only include postgresql/t directory
        command: git sparse-checkout set postgresql/t
        args:
          chdir: /tmp/percona-qa

      - name: Checkout master branch
        command: git checkout master
        args:
          chdir: /tmp/percona-qa

      - name: List postgresql directory contents
        command: ls -R /tmp/percona-qa/postgresql/t
        register: pgsql_dir_listing

      - name: Show postgresql directory tree
        debug:
          var: pgsql_dir_listing.stdout_lines

      - name: Copy postgresql/t files to pg_tde/t
        shell: cp -r /tmp/percona-qa/postgresql/t/* /tmp/postgres/contrib/pg_tde/t/

    when: testsuite == 'check-tde'

  # =============================
  # Run pg_tde regression tests
  # =============================
  - name: Run check tde tests
    shell: | 
      export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
      export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
      export VAULT_ADDR="https://127.0.0.1:8200"
      export VAULT_TOKEN=root
      export PGCTLTIMEOUT=120
      export PG_TEST_TIMEOUT_DEFAULT=300
      cd /tmp/postgres/contrib/pg_tde && make -s check -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/contrib/pg_tde"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
      PGCTLTIMEOUT: 120
      PG_TEST_TIMEOUT_DEFAULT: 300
    when: testsuite == 'check-tde'
    ignore_errors: yes
    register: regression

  - name: Show stdout of check tde tests
    debug:
      var: regression.stdout_lines
    when: testsuite == 'check-tde'

  - name: Show stderr if test fails
    debug:
      var: regression.stderr_lines
    when:
      - testsuite == 'check-tde'
      - regression is defined
      - regression.rc != 0

  - name: Show tde regression diffs if tests failed
    shell: cat /tmp/postgres/contrib/pg_tde/regression.diffs
    register: diffs_output
    when:
      - testsuite == 'check-tde'
      - regression is defined
      - regression.rc != 0
    ignore_errors: true

  - name: Print tde regression diffs
    debug:
      msg: "{{ diffs_output.stdout_lines }}"
    when:
      - testsuite == 'check-tde'
      - regression is defined
      - regression.rc != 0
      - diffs_output is defined

  - name: Fail the playbook if tde tests failed
    fail:
      msg: "TDE regression tests failed with return code {{ regression.rc }}"
    when:
      - testsuite == 'check-tde'
      - regression is defined
      - regression.rc != 0

  # =============================
  # Run server regression tests
  # =============================
  - name: Run server regression tests
    shell: | 
      export PGCTLTIMEOUT=120
      export PG_TEST_TIMEOUT_DEFAULT=300
      cd /tmp/postgres/ && make -s check -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      TDE_MODE: 1
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
      PGCTLTIMEOUT: 120
      PG_TEST_TIMEOUT_DEFAULT: 300
    when: testsuite == 'check-server'
    ignore_errors: yes
    register: regression

  - name: Show stdout of server regression tests
    debug:
      var: regression.stdout_lines
    when: testsuite == 'check-server'

  - name: Show stderr if server test fails
    debug:
      var: regression.stderr_lines
    when:
      - testsuite == 'check-server'
      - regression is defined
      - regression.rc != 0

  - name: Show server regression diffs if tests failed
    shell: cat /tmp/postgres/src/test/regress/regression.diffs
    register: diffs_output
    when:
      - testsuite == 'check-server'
      - regression is defined
      - regression.rc != 0
    ignore_errors: true

  - name: Print regression diffs
    debug:
      msg: "{{ diffs_output.stdout_lines }}"
    when:
      - testsuite == 'check-server'
      - regression is defined
      - regression.rc != 0
      - diffs_output.stdout is defined

  - name: Fail the playbook if server tests failed
    fail:
      msg: "Server regression tests failed with return code {{ regression.rc }}"
    when:
      - testsuite == 'check-server'
      - regression is defined
      - regression.rc != 0

  # =============================
  # Run check-all regression tests
  # =============================
  - name: Run all regression tests
    shell: | 
      export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
      export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
      export VAULT_ADDR="https://127.0.0.1:8200"
      export VAULT_TOKEN=root
      export PGCTLTIMEOUT=120
      export PG_TEST_TIMEOUT_DEFAULT=300
      cd /tmp/postgres/ && make -s check-world -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
      PGCTLTIMEOUT: 120
      PG_TEST_TIMEOUT_DEFAULT: 300
    when: testsuite == 'check-all'
    ignore_errors: yes
    register: regression

  - name: Show stdout of check-all regression tests
    debug:
      var: regression.stdout_lines
    when: testsuite == 'check-all'

  - name: Show stderr if test fails
    debug:
      var: regression.stderr_lines
    when:
      - testsuite == 'check-all'
      - regression is defined
      - regression.rc != 0

  - name: Find regression.diffs files if tests fail
    find:
      paths: "/tmp/postgres"
      patterns: "regression.diffs"
      recurse: yes
    register: regression_diff_files
    when:
      - testsuite == 'check-all'
      - regression is defined
      - regression.rc != 0

  - name: Show contents of regression.diffs with directory name
    shell: |
      echo "Directory: $(dirname {{ item.path }})"
      cat {{ item.path }}
    loop: "{{ regression_diff_files.files }}"
    when:
      - testsuite == 'check-all'
      - regression is defined
      - regression.rc != 0
      - regression_diff_files is defined

  - name: Fail the playbook if tests failed in check-all
    fail:
      msg: "All regression tests failed with return code {{ regression.rc }}"
    when:
      - testsuite == 'check-all'
      - regression is defined
      - regression.rc != 0

  # =============================
  # Run installcheck-world regression tests with pg_tde
  # =============================
  - name: Run tde_setup_global.sql using psql
    shell: | 
      cd /opt/pgsql/bin
      ./psql -d postgres -f /tmp/postgres/ci_scripts/tde_setup_global.sql  -v ON_ERROR_STOP=on
      ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile restart -o '-p 5432'
    become: true
    become_user: postgres
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      TDE_MODE: "1"
      LANG: "C.UTF-8"
      LC_CTYPE: "C"
      LC_ALL: "C"
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
    ignore_errors: yes
    when: testsuite == 'installcheck-world'

  - name: Run installcheck-world with tde
    ignore_errors: yes
    shell: |
      psql -c "show default_table_access_method ;"

      export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
      export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
      export VAULT_ADDR=https://127.0.0.1:8200
      export VAULT_TOKEN=root
      export TDE_MODE=1
      export PGCTLTIMEOUT=120
      export PG_TEST_TIMEOUT_DEFAULT=300
      cd /tmp/postgres && EXTRA_REGRESS_OPTS="--extra-setup=/tmp/postgres/ci_scripts/tde_setup.sql" make -s installcheck-world -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      TDE_MODE: 1
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
      PGCTLTIMEOUT: 120
      PG_TEST_TIMEOUT_DEFAULT: 300
    when: testsuite == 'installcheck-world'
    register: regression

  - name: Show stdout of installcheck-world regression tests
    debug:
      var: regression.stdout_lines
    when: testsuite == 'installcheck-world'

  - name: Show stderr if installcheck-world test fails
    debug:
      var: regression.stderr_lines
    when:
      - testsuite == 'installcheck-world'
      - regression is defined
      - regression.rc != 0

  - name: Fail the playbook if tests failed in installcheck-world
    fail:
      msg: "All regression tests failed with return code {{ regression.rc }}"
    when:
      - testsuite == 'installcheck-world'
      - regression is defined
      - regression.rc != 0

  - name: Find regression.diffs files if installcheck-world tests fail
    find:
      paths: "/tmp/postgres"
      patterns: "regression.diffs"
      recurse: yes
    register: regression_diff_files
    when:
      - testsuite == 'installcheck-world'
      - regression is defined
      - regression.rc != 0

  - name: Show contents of regression.diffs with directory name
    shell: |
      echo "Directory: $(dirname {{ item.path }})"
      cat {{ item.path }}
    loop: "{{ regression_diff_files.files }}"
    when:
      - testsuite == 'installcheck-world'
      - regression is defined
      - regression.rc != 0
