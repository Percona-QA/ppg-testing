---
  - name: Set Facts
    set_fact:
      testsuite: "{{ lookup('env', 'TESTSUITE') }}"
      percona_server_version: "{{ lookup('env', 'PERCONA_SERVER_VERSION') }}"
      major_version: "{{ lookup('env', 'VERSION').split('.') }}"
      cacheable: true

  - name: Include Redhat tasks file 
    include_tasks: 
      file: "redhat_tasks.yml"
    when: ansible_os_family == 'RedHat'

  - name: Include Debian tasks file 
    include_tasks: 
      file: "debian_tasks.yml"
    when: ansible_os_family == 'Debian'


  - name: Clone Postgres/PSP sources with pg_tde
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/postgres
      track_submodules: true
    vars:
      repo: "{{ lookup('env', 'PSP_REPO') }}"
      version: "{{ lookup('env', 'PSP_BRANCH') }}"
    become_user: postgres

  - name: Submodule update
    command : git submodule update --init --recursive
    args:
      chdir: /tmp/postgres
    become_user: postgres

  - name: Configure Postgres/PSP from sources
    command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql'
    args:
      chdir: /tmp/postgres
    become_user: postgres
    register: results

  - debug: var=results.stdout_lines

  - name: Run make install-world with parallel jobs
    ansible.builtin.command: make install-world -j
    args:
      chdir: /tmp/postgres
    become_user: postgres
    environment:
      TDE_MODE: 1
    register: results

  - debug: var=results.stdout_lines

  - name: Copy pg_config to /usr/bin
    become: true 
    command: sudo cp /opt/pgsql/bin/pg_config /usr/bin

  - name: Remove multiple extensions tap test case from pg_tde
    become_user: postgres
    command: rm -f /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
    register: results

  - debug: var=results.stdout_lines

  # - name: Remove create_schema.sql test case for tde_heap
  #   become_user: postgres
  #   command: rm -f /tmp/postgres/src/test/regress/sql/create_schema.sql
  #   when: testsuite in ['server-installcheck-world-with-tde', 'tde-installcheck-only']
  #   register: results

  # - debug: var=results.stdout_lines

  - name: initdb cluster
    become_user: postgres
    command: ./initdb -D /opt/pgsql/data --set shared_preload_libraries=pg_tde
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    register: results

  - debug: var=results.stdout_lines

  - name: Start Server
    become_user: postgres
    command: ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      TDE_MODE: 1
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
    register: results

  - debug: var=results.stdout_lines

  - name: Check pg_tde library output
    become_user: postgres
    shell: | 
      psql -c "select * from pg_available_extensions where name like 'pg_tde';"
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    register: results

  - debug: var=results.stdout_lines

  - name: Run check tde tests
    shell: | 
      export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
      export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
      export VAULT_ADDR="https://127.0.0.1:8200"
      export VAULT_TOKEN=root
      cd /tmp/postgres/contrib/pg_tde && make -s check -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      INSTALL_DIR: "/opt/pgsql"
      PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
    when: testsuite == 'check-tde'
    ignore_errors: yes
    register: regression

  - name: Show stdout if test fails
    debug:
      var: regression.stdout_lines
    when:
      - regression is defined and regression.rc != 0
      - testsuite == 'check-tde'

  - name: Show stderr if test fails
    debug:
      var: regression.stderr_lines
    when:
      - regression is defined and regression.rc != 0
      - testsuite == 'check-tde'

  - name: Fail the playbook if tests failed
    fail:
      msg: "TDE regression tests failed with return code {{ regression.rc }}"
    when:
      - regression is defined and regression.rc != 0
      - testsuite == 'check-tde'

  # - name: Run pg_tde tests only - check
  #   shell: | 
  #     cd /opt/pgsql/bin
  #     echo "default_table_access_method = 'tde_heap'" >> /opt/pgsql/data/postgresql.conf
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile stop -o '-p 5432'
  #     sleep 5
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
  #     psql -c "show default_table_access_method ;"

  #     export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
  #     export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
  #     export VAULT_ADDR=https://127.0.0.1:8200
  #     export VAULT_TOKEN=root

  #     echo "Using Vault token file: $VAULT_ROOT_TOKEN_FILE"
  #     echo "Using Vault CA cert file: $VAULT_CACERT_FILE"
  #     cd /tmp/postgres/contrib/pg_tde && make -s check -k
  #   become_user: postgres
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres/contrib/pg_tde"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: 1
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   when: testsuite == 'tde-installcheck-only'
  #   register: regression

  # - debug: var=regression.stdout_lines
  #   when: testsuite == 'tde-installcheck-only'
  # - debug: var=regression.stderr_lines
  #   when: testsuite == 'tde-installcheck-only'

  # - name: Run tde_setup_global.sql using psql
  #   shell: |
  #     cd /opt/pgsql/bin
  #     ./psql -d postgres -f /tmp/postgres/ci_scripts/tde_setup_global.sql  -v ON_ERROR_STOP=on
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile restart -o '-p 5432'
  #   become: true
  #   become_user: postgres
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: "1"
  #     LANG: "C.UTF-8"
  #     LC_CTYPE: "C"
  #     LC_ALL: "C"
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   ignore_errors: yes
  #   when: testsuite == 'server-installcheck-world-with-tde'

  # - name: Run installcheck-world with tde
  #   ignore_errors: yes
  #   shell: | 
  #     cd /opt/pgsql/bin
  #     echo "default_table_access_method = 'tde_heap'" >> /opt/pgsql/data/postgresql.conf
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile stop -o '-p 5432'
  #     psql -c "show default_table_access_method ;"

  #     export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
  #     export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
  #     export VAULT_ADDR=https://127.0.0.1:8200
  #     export VAULT_TOKEN=root

  #     echo "Using Vault token file: $VAULT_ROOT_TOKEN_FILE"
  #     echo "Using Vault CA cert file: $VAULT_CACERT_FILE"
  #     export TDE_MODE=1 && cd /tmp/postgres && EXTRA_REGRESS_OPTS="--extra-setup=/tmp/postgres/ci_scripts/tde_setup.sql" make -s installcheck-world -k
  #   become_user: postgres
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres/"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: 1
  #     LANG: C.UTF-8
  #     LC_CTYPE: C
  #     LC_ALL: C
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   when: testsuite == 'server-installcheck-world-with-tde'
  #   register: regression

  # - debug: var=regression.stdout_lines
  #   when: testsuite == 'server-installcheck-world-with-tde'
  # - debug: var=regression.stderr_lines
  #   when: testsuite == 'server-installcheck-world-with-tde'

  # - stat:
  #     path: /tmp/postgres/src/test/regress/regression.diffs
  #   register: server_diff

  # - name: Get Server - regression.diffs contents
  #   command: cat /tmp/postgres/src/test/regress/regression.diffs
  #   register: command_output
  #   when: server_diff.stat.isreg is defined and server_diff.stat.isreg == True

  # - name: Print to console Server - regression.diffs contents
  #   debug:
  #     msg: "{{command_output.stdout_lines}}"
  #   when: server_diff.stat.isreg is defined and server_diff.stat.isreg == True

  # - name: Get server logfile contents if exists
  #   command: cat /tmp/postgres/logfile
  #   register: log_output
  #   when: regression.rc is defined and regression.rc != 0

  # - name: Print to console logfile
  #   debug:
  #     msg: "{{log_output.stdout_lines}}"
  #   when: regression.rc is defined and regression.rc != 0

  # - debug: var=regression.rc
  #   when: regression.rc is defined

  # # - name: End play if regression has failures
  # #   fail:
  # #     msg: "regression failed"
  # #   when: regression.rc is defined and regression.rc != 0

  # - name: End play if regression has failures
  #   fail:
  #     msg: "regression failed"
  #   when: regression.rc is defined and (regression.rc != 0 and regression.rc != 2)

