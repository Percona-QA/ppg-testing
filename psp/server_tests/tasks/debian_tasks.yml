---
  - name: Install Debian Packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - wget
        - libtext-trim-perl
        - libreadline6-dev
        - systemtap-sdt-dev
        - zlib1g-dev
        - libssl-dev
        - libpam0g-dev
        - python3-dev
        - bison
        - flex
        - libipc-run-perl
        - docbook-xsl
        - docbook-xsl
        - libxml2
        - libxml2-utils
        - libxml2-dev
        - libxslt-dev
        - xsltproc
        - libkrb5-dev
        - libldap2-dev
        - libsystemd-dev
        - gettext
        - tcl-dev
        - libperl-dev
        - pkg-config
        - clang
        - llvm
        - llvm-dev
        - libselinux1-dev
        - uuid-dev
        - liblz4-dev
        - lcov
        - libcurl4-openssl-dev
        - vim
        - git
        - make
        - gcc
        - autoconf
        - libjson-c-dev
        - libhttp-server-simple-perl
        - python3-pykmip

  - name: Install rename
    ansible.builtin.shell: sudo DEBIAN_FRONTEND=noninteractive apt install -y rename
  
  - name: Install IPC::RUN
    ansible.builtin.shell: yes | sudo /usr/bin/perl -MCPAN -e 'install IPC::RUN'

  - name: Install Text::Trim
    ansible.builtin.shell: yes | sudo /usr/bin/perl -MCPAN -e 'install Text::Trim'


  - name: Add the user 'postgres'
    ansible.builtin.user:
      name: postgres
      shell: /bin/bash
      uid: 1040
      group: admin

  - name: Creates directory
    ansible.builtin.file:
      path: /opt/pgsql
      state: directory
      owner: postgres
      group: admin
      mode: 0775

  - name: Creates directory
    ansible.builtin.file:
      path: /opt/pgsql/data
      state: directory
      owner: postgres
      group: admin
      mode: 0775

  - name: Include KMIP server setup playbook
    include_tasks: run_kmip_vault_server.yml

  - name: Change ownership of /tmp/vault_env to postgres
    ansible.builtin.file:
      path: /tmp/vault_env
      owner: postgres
      group: admin
      recurse: true
    become: true

  # - name: Clone Postgres/PSP sources with pg_tde
  #   git:
  #     repo: "{{ repo }}"
  #     version: "{{ version }}"
  #     dest: /tmp/postgres
  #     track_submodules: true
  #   vars:
  #     repo: "{{ lookup('env', 'PSP_REPO') }}"
  #     version: "{{ lookup('env', 'PSP_BRANCH') }}"
  #   become_user: postgres

  # - name: Submodule update
  #   command : git submodule update --init --recursive
  #   args:
  #     chdir: /tmp/postgres
  #   become_user: postgres

  # # - name: Remove pg_tde from source tree for heap-checkworld
  # #   become_user: postgres
  # #   command: rm -fr /tmp/postgres/contrib/pg_tde
  # #   when: testsuite == 'server-check-world-without-tde'
  # #   register: results

  # # - name: Remove libtde from source tree for heap-checkworld
  # #   become_user: postgres
  # #   command: rm -fr /tmp/postgres/src/libtde
  # #   when: testsuite == 'server-check-world-without-tde'
  # #   register: results

  # # - debug: var=results.stdout_lines

  # - name: Configure Postgres/PSP from sources
  #   command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql'
  #   args:
  #     chdir: /tmp/postgres
  #   become_user: postgres
  #   register: results

  # - debug: var=results.stdout_lines

  # - name: Build Postgres/PSP (world) from sources
  #   make:
  #     chdir: "/tmp/postgres"
  #     jobs: 4 
  #     target: world
  #   become_user: postgres
  #   environment:
  #     TDE_MODE: 1 
  #   register: results

  # - debug: var=results.stdout_lines

  # - name: Install Postgres/PSP (install-world) from build binaries
  #   make:
  #     chdir: "/tmp/postgres"
  #     target: install-world 
  #   environment:
  #     TDE_MODE: 1 
  #   register: results

  # - debug: var=results.stdout_lines

  # - name: Copy pg_config to /usr/bin
  #   become: true 
  #   command: sudo cp /opt/pgsql/bin/pg_config /usr/bin

  # - name: Remove multiple extensions tap test case from pg_tde
  #   become_user: postgres
  #   command: rm -f /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
  #   register: results

  # - debug: var=results.stdout_lines

  # # - name: Remove create_schema.sql test case for tde_heap
  # #   become_user: postgres
  # #   command: rm -f /tmp/postgres/src/test/regress/sql/create_schema.sql
  # #   when: testsuite in ['server-installcheck-world-with-tde', 'tde-installcheck-only']
  # #   register: results

  # # - debug: var=results.stdout_lines

  # - name: initdb cluster
  #   become_user: postgres
  #   command: ./initdb -D /opt/pgsql/data --set shared_preload_libraries=pg_tde
  #   args:
  #     chdir: /opt/pgsql/bin
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #   when: testsuite in ['server-installcheck-world-with-tde', 'tde-installcheck-only']
  #   register: results

  # - debug: var=results.stdout_lines
  #   when: testsuite in ['server-installcheck-world-with-tde', 'tde-installcheck-only']

  # - name: Start Server
  #   become_user: postgres
  #   command: ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
  #   args:
  #     chdir: /opt/pgsql/bin
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     TDE_MODE: 1
  #     LANG: C.UTF-8
  #     LC_CTYPE: C
  #     LC_ALL: C
  #   when: testsuite in ['server-installcheck-world-with-tde', 'tde-installcheck-only']

  #   register: results

  # - debug: var=results.stdout_lines
  #   when: testsuite in ['server-installcheck-world-with-tde', 'tde-installcheck-only']

  # - name: Check pg_tde library output
  #   become_user: postgres
  #   shell: | 
  #     psql -c "select * from pg_available_extensions where name like 'pg_tde';"
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #   when: testsuite == 'server-installcheck-world-with-tde')
  #   register: results

  # - debug: var=results.stdout_lines
  #   when: testsuite == 'server-installcheck-world-with-tde')

  # - name: Check default_table_access_method library output
  #   become_user: postgres
  #   shell: | 
  #     psql -c "show default_table_access_method ;"
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #   when: testsuite == 'server-installcheck-world-with-tde')
  #   register: results

  # - debug: var=results.stdout_lines
  #   when: testsuite == 'server-installcheck-world-with-tde')

  # - name: Run server-check-world
  #   shell: | 
  #     export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
  #     export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
  #     export VAULT_ADDR=https://127.0.0.1:8200
  #     export VAULT_TOKEN=root

  #     echo "Using Vault token file: $VAULT_ROOT_TOKEN_FILE"
  #     echo "Using Vault CA cert file: $VAULT_CACERT_FILE"
  #     cd /tmp/postgres && make -s check-world
  #   become_user: postgres
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres/"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   when: testsuite == 'server-check-world-without-tde'
  #   register: regression

  # - debug: var=regression.stdout_lines
  #   when: testsuite == 'server-check-world-without-tde'
  # - debug: var=regression.stderr_lines
  #   when: testsuite == 'server-check-world-without-tde'

  # - name: Run pg_tde tests only - check
  #   shell: | 
  #     cd /opt/pgsql/bin
  #     echo "default_table_access_method = 'tde_heap'" >> /opt/pgsql/data/postgresql.conf
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile stop -o '-p 5432'
  #     sleep 5
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start -o '-p 5432'
  #     psql -c "show default_table_access_method ;"

  #     export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
  #     export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
  #     export VAULT_ADDR=https://127.0.0.1:8200
  #     export VAULT_TOKEN=root

  #     echo "Using Vault token file: $VAULT_ROOT_TOKEN_FILE"
  #     echo "Using Vault CA cert file: $VAULT_CACERT_FILE"
  #     cd /tmp/postgres/contrib/pg_tde && make -s check -k
  #   become_user: postgres
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres/contrib/pg_tde"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: 1
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   when: testsuite == 'tde-installcheck-only'
  #   register: regression

  # - debug: var=regression.stdout_lines
  #   when: testsuite == 'tde-installcheck-only'
  # - debug: var=regression.stderr_lines
  #   when: testsuite == 'tde-installcheck-only'

  # - name: Run tde_setup_global.sql using psql
  #   shell: |
  #     cd /opt/pgsql/bin
  #     ./psql -d postgres -f /tmp/postgres/ci_scripts/tde_setup_global.sql  -v ON_ERROR_STOP=on
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile restart -o '-p 5432'
  #   become: true
  #   become_user: postgres
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: "1"
  #     LANG: "C.UTF-8"
  #     LC_CTYPE: "C"
  #     LC_ALL: "C"
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   ignore_errors: yes
  #   when: testsuite == 'server-installcheck-world-with-tde'

  # - name: Run installcheck-world with tde
  #   ignore_errors: yes
  #   shell: | 
  #     cd /opt/pgsql/bin
  #     echo "default_table_access_method = 'tde_heap'" >> /opt/pgsql/data/postgresql.conf
  #     ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile stop -o '-p 5432'
  #     psql -c "show default_table_access_method ;"

  #     export VAULT_ROOT_TOKEN_FILE=/tmp/vault_env/vault_token.txt
  #     export VAULT_CACERT_FILE=/tmp/vault_env/vault_ca.crt
  #     export VAULT_ADDR=https://127.0.0.1:8200
  #     export VAULT_TOKEN=root

  #     echo "Using Vault token file: $VAULT_ROOT_TOKEN_FILE"
  #     echo "Using Vault CA cert file: $VAULT_CACERT_FILE"
  #     export TDE_MODE=1 && cd /tmp/postgres && EXTRA_REGRESS_OPTS="--extra-setup=/tmp/postgres/ci_scripts/tde_setup.sql" make -s installcheck-world -k
  #   become_user: postgres
  #   args:
  #     executable: /bin/bash
  #     chdir: "/tmp/postgres/"
  #   environment:
  #     PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
  #     LD_LIBRARY_PATH: "/opt/pgsql/lib"
  #     PG_TEST_PORT_DIR: "/tmp/pg_tde"
  #     INSTALL_DIR: "/opt/pgsql"
  #     TDE_MODE: 1
  #     LANG: C.UTF-8
  #     LC_CTYPE: C
  #     LC_ALL: C
  #     PERCONA_SERVER_VERSION: "{{ percona_server_version }}"
  #   when: testsuite == 'server-installcheck-world-with-tde'
  #   register: regression

  # - debug: var=regression.stdout_lines
  #   when: testsuite == 'server-installcheck-world-with-tde'
  # - debug: var=regression.stderr_lines
  #   when: testsuite == 'server-installcheck-world-with-tde'

  # - stat:
  #     path: /tmp/postgres/src/test/regress/regression.diffs
  #   register: server_diff

  # # - name: Get Server - regression.diffs contents
  # #   ignore_errors: yes
  # #   command: cat /tmp/postgres/src/test/regress/regression.diffs
  # #   register: command_output
  # #   when: output.stat.exists == True

  # # - name: Print to console Server - regression.diffs contents
  # #   ignore_errors: yes
  # #   debug:
  # #     msg: "{{command_output.stdout_lines}}"
  # #   when: output.stat.exists == True

  # # - stat:
  # #     path: /tmp/postgres/contrib/pg_tde/regression.diffs
  # #   register: output

  # # - name: Get pg_tde - regression.diffs contents
  # #   ignore_errors: yes
  # #   command: cat /tmp/postgres/contrib/pg_tde/regression.diffs
  # #   register: command_output
  # #   when: output.stat.exists == True

  # # - name: Print to console pg_tde - regression.diffs contents
  # #   ignore_errors: yes
  # #   debug:
  # #     msg: "{{command_output.stdout_lines}}"
  # #   when: output.stat.exists == True

  # - name: Get Server - regression.diffs contents
  #   command: cat /tmp/postgres/src/test/regress/regression.diffs
  #   register: command_output
  #   when: server_diff.stat.isreg is defined and server_diff.stat.isreg == True

  # - name: Print to console Server - regression.diffs contents
  #   debug:
  #     msg: "{{command_output.stdout_lines}}"
  #   when: server_diff.stat.isreg is defined and server_diff.stat.isreg == True

  # - stat:
  #     path: /tmp/postgres/contrib/pg_tde/regression.diffs
  #   register: tde_diff

  # - name: Get pg_tde - regression.diffs contents
  #   command: cat /tmp/postgres/contrib/pg_tde/regression.diffs
  #   register: command_output
  #   when: tde_diff.stat.isreg is defined and tde_diff.stat.isreg == True

  # - name: Print to console pg_tde - regression.diffs contents
  #   debug:
  #     msg: "{{command_output.stdout_lines}}"
  #   when: tde_diff.stat.isreg is defined and tde_diff.stat.isreg == True

  # - name: Get server logfile contents if exists
  #   command: cat /tmp/postgres/logfile
  #   register: log_output
  #   when: regression.rc is defined and regression.rc != 0

  # - name: Print to console logfile
  #   debug:
  #     msg: "{{log_output.stdout_lines}}"
  #   when: regression.rc is defined and regression.rc != 0

  # - debug: var=regression.rc
  #   when: regression.rc is defined

  # # - name: End play if regression has failures
  # #   fail:
  # #     msg: "regression failed"
  # #   when: regression.rc is defined and regression.rc != 0

  # - name: End play if regression has failures
  #   fail:
  #     msg: "regression failed"
  #   when: regression.rc is defined and (regression.rc != 0 and regression.rc != 2)
