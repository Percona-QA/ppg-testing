---
  - name: Install pre-packages on Debian
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - make
        - gcc
        - autoconf
        - libjson-c-dev
        - libcurl4-openssl-dev
        - libreadline6-dev
        - systemtap-sdt-dev
        - wget
        - zlib1g-dev
        - libssl-dev
        - libpam0g-dev
        - bison
        - flex
        - libipc-run-perl
        - libcurl4-openssl-dev
        - libhttp-server-simple-perl
        - libtext-trim-perl
        - python3-dev

  - name: Install Debian Packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - wget
        - libtext-trim-perl
        - libreadline6-dev
        - systemtap-sdt-dev
        - zlib1g-dev
        - libssl-dev
        - libpam0g-dev
        - python3
        - python3-dev
        - bison
        - flex
        - libipc-run-perl
        - docbook-xsl
        - docbook-xsl
        - libxml2
        - libxml2-utils
        - libxml2-dev
        - libxslt-dev
        - xsltproc
        - libkrb5-dev
        - libldap2-dev
        - libsystemd-dev
        - gettext
        - tcl-dev
        - libperl-dev
        - pkg-config
        - clang
        - llvm
        - llvm-dev
        - libselinux1-dev
        - uuid-dev
        - liblz4-dev
        - lcov
        - libcurl4-openssl-dev
        - vim
        - git
        - make
        - gcc
        - autoconf
        - libjson-c-dev
        - libhttp-server-simple-perl
        - python3-pip
        - python3-venv
        - python3-pykmip

  - name: Install rename
    ansible.builtin.shell: sudo DEBIAN_FRONTEND=noninteractive apt install -y rename

  - name: Install IPC::RUN
    ansible.builtin.shell: yes | sudo /usr/bin/perl -MCPAN -e 'install IPC::RUN'

  - name: Install Text::Trim
    ansible.builtin.shell: yes | sudo /usr/bin/perl -MCPAN -e 'install Text::Trim'

  - name: Install hashicorp repo and vault
    shell: |
      wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      sudo apt update && sudo apt install -y vault

  - name: install Percona Platform for PostgreSQL deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      postgres_version: "{{ major_version }}"
      packages:
      - percona-postgresql
      - percona-postgresql-{{ postgres_version }}
      - percona-postgresql-all
      - percona-postgresql-client
      - percona-postgresql-client-{{ postgres_version }}
      - percona-postgresql-common
      - percona-postgresql-contrib
      - percona-postgresql-doc
      - percona-postgresql-doc-{{ postgres_version }}
      - percona-postgresql-plperl-{{ postgres_version }}
      - percona-postgresql-plpython3-{{ postgres_version }}
      - percona-postgresql-pltcl-{{ postgres_version }}
      - percona-postgresql-server-dev-{{ postgres_version }}
      - percona-postgresql-server-dev-all
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Install pgaudit Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      postgres_version: "{{ major_version }}"
      packages:
        - percona-postgresql-{{ postgres_version }}-pgaudit
        - percona-postgresql-{{ postgres_version }}-pgaudit-dbgsym
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Install percona-pgaudit{{ postgres_version }}_set_user Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      postgres_version: "{{ major_version }}"
      packages:
        - percona-pgaudit{{ postgres_version }}-set-user
        - percona-pgaudit{{ postgres_version }}-set-user-dbgsym
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Install pgrepack Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      postgres_version: "{{ major_version }}"
      packages:
        - percona-postgresql-{{ postgres_version }}-repack
        - percona-postgresql-{{ postgres_version }}-repack-dbgsym
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Install percona-postgis Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      postgres_version: "{{ major_version }}"
      packages:
        - percona-postgresql-{{ postgres_version }}-postgis-3
        - percona-postgresql-{{ postgres_version }}-postgis-3-scripts
        - percona-postgresql-postgis-scripts
        - percona-postgresql-postgis
        - percona-postgis
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Install pg-stat-monitor Debian/Ubuntu Package
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
        - percona-pg-stat-monitor{{ major_version }}
        - percona-pg-stat-monitor{{ major_version }}-dbgsym
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Clone Postgres/PSP sources with pg_tde
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/postgres
      track_submodules: true
    vars:
      repo: "{{ lookup('env', 'PSP_REPO') }}"
      version: "{{ lookup('env', 'PSP_BRANCH') }}"
    become_user: postgres

  - name: Submodule update
    command : git submodule update --init --recursive
    args:
      chdir: /tmp/postgres
    become_user: postgres

  - name: Configure Postgres/PSP from sources
    command: ./configure '--enable-debug' '--enable-cassert' '--enable-tap-tests' '--with-icu' '--prefix=/opt/pgsql'
    args:
      chdir: /tmp/postgres
    become_user: postgres
    register: results

  - name: Build Postgres/PSP (world) from sources
    make:
      chdir: "/tmp/postgres"
      jobs: 4
      target: world
    become_user: postgres
    environment:
      TDE_MODE: 1
    register: results

  - debug: var=results.stdout_lines

  # - name: Install pg_tde from sources
  #   make:
  #     target: install
  #     chdir: "/tmp/pg_tde"
  #     params:
  #       USE_PGXS: 1

  # - name: Install pg_tde Debian/Ubuntu Package
  #   apt:
  #     name: "{{ packages }}"
  #     state: latest
  #     update_cache: yes
  #   vars:
  #     packages:
  #       - percona-postgresql-{{ major_version }}-pg-tde

  - name: Add extensions to postgresql.conf for Debian
    lineinfile:
      path: /etc/postgresql/{{ major_version }}/main/postgresql.conf
      line: shared_preload_libraries = 'pg_tde'

  - name: Stop postgresql service for Debian based
    service:
      name: postgresql
      state: stopped

  - name: Start postgresql service for Debian based
    service:
      name: postgresql
      state: started
      enabled: true

  - name: Remove old 005_multiple_extensions.pl to test folder
    become_user: postgres
    command: rm -fr /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
    register: results

  - debug: var=regression.stdout_lines

  - name: Copy 005_multiple_extensions.pl to test folder
    copy:
      src: 005_multiple_extensions.pl
      dest: /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
      owner: postgres
      group: postgres
      mode: 0644
    register: results

  - debug: var=regression.stdout_lines

  # installcheck-world Server testsuite
  - name: Start pg_tde tests only - installcheck
    shell: | 
      psql -c "CREATE SCHEMA tde;"
      psql -c "CREATE EXTENSION IF NOT EXISTS pg_tde SCHEMA tde;"
      psql -c "SELECT tde.pg_tde_add_global_key_provider_file('reg_file-global', '/tmp/pg_tde_test_keyring.per');"
      psql -c "SELECT tde.pg_tde_set_server_principal_key('global-principal-key', 'reg_file-global');"
      psql -c "ALTER SYSTEM SET pg_tde.wal_encrypt = on;"
      psql -c "CREATE EXTENSION IF NOT EXISTS pg_tde;"
      psql -c "ALTER SYSTEM SET search_path = postgres,public,tde;"
      psql -c "SELECT pg_reload_conf();"
      echo "default_table_access_method = 'tde_heap'" >> /etc/postgresql/17/main/postgresql.conf
      sudo systemctl stop postgresql
      sleep 5
      sudo systemctl start postgresql
      cd /tmp
      python3 -m venv validation
      source validation/bin/activate
      pip install --upgrade pip
      pip install pykmip
      export PATH=$PATH:/tmp/validation/bin
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/bin/create_certificates.py
      python3 create_certificates.py
      cat client_certificate_jane_doe.pem >> client_key_jane_doe.pem
      mkdir policies
      cd policies
      wget https://raw.githubusercontent.com/OpenKMIP/PyKMIP/refs/heads/master/examples/policy.json
      cd ..
      pykmip-server -f "/tmp/postgres/contrib/pg_tde/pykmip-server.conf" -l /tmp/kmip-server.log &
      TV=$(mktemp)
      { exec >$TV; vault server -dev; } &
      sleep 10
      export ROOT_TOKEN=$(cat $TV | grep "Root Token" | cut -d ":" -f 2 | xargs echo -n)
      echo "Root token: $ROOT_TOKEN"
      export ROOT_TOKEN=$ROOT_TOKEN && cd /tmp/postgres/contrib/pg_tde && EXTRA_REGRESS_OPTS="--extra-setup=/tmp/postgres/ci_scripts/tde_setup.sql" make -s installcheck USE_PGXS=1 -k
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/contrib/pg_tde"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
      TDE_MODE: 1
    register: regression

  - debug: var=regression.stdout_lines

  - stat:
      path: /tmp/postgres/contrib/pg_tde/regression.diffs
    register: tde_diff

  - name: Get pg_tde - regression.diffs contents
    command: cat /tmp/postgres/contrib/pg_tde/regression.diffs
    register: command_output
    when: tde_diff.stat.isreg is defined and tde_diff.stat.isreg == True

  - name: Print to console pg_tde - regression.diffs contents
    debug:
      msg: "{{command_output.stdout_lines}}"
    when: tde_diff.stat.isreg is defined and tde_diff.stat.isreg == True

  # - name: Get server logfile contents if exists
  #   command: cat /tmp/postgres/logfile
  #   register: log_output
  #   when: regression.rc is defined and regression.rc != 0

  # - name: Print to console logfile
  #   debug:
  #     msg: "{{log_output.stdout_lines}}"
  #   when: regression.rc is defined and regression.rc != 0

  - debug: var=regression.rc
    when: regression.rc is defined

  - name: End play if regression has failures
    fail:
      msg: "regression failed"
    when: regression.rc is defined and (regression.rc != 0 and regression.rc != 2)
