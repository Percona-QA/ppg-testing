---
  - name: setup epel release
    yum:
      name: epel-release
      update_cache: yes
      state: present

  - name: Install pre-packages on Redhat
    yum:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - make
        - gcc
        - autoconf
        - json-c-devel
        - libcurl-devel

  - name: Clean dnf RHEL8
    become: true
    command: dnf clean all -y
    when: ansible_distribution_major_version == "8"

  - name: Enable ol8_codeready_builder on oracle linux 8
    become: true
    command: dnf config-manager --set-enabled ol8_codeready_builder
    when: ansible_distribution_major_version == "8"

  - name: Enable ol9_codeready_builder on oracle linux 9
    become: true
    command: dnf config-manager --set-enabled ol9_codeready_builder
    when: ansible_distribution_major_version == "9"

  - name: Install Perl IPC Run on RHEL
    become: true
    yum:
      name: perl-IPC-Run
      state: latest
      update_cache: yes   

  - name: Disable dnf module for RHEL8
    become: true
    command: dnf module disable postgresql -y
    when: ansible_distribution_major_version == "8"

  - name: install Percona Platform for PostgreSQL rpm packages for RHEL
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      postgres_version: "{{ major_version }}"
      packages:
      - percona-postgresql-client-common
      - percona-postgresql-common
      - percona-postgresql-server-dev-all
      - percona-postgresql{{ postgres_version }}
      - percona-postgresql{{ postgres_version }}-contrib
      - percona-postgresql{{ postgres_version }}-devel
      - percona-postgresql{{ postgres_version }}-libs
      - percona-postgresql{{ postgres_version }}-plperl
      - percona-postgresql{{ postgres_version }}-plpython3
      - percona-postgresql{{ postgres_version }}-pltcl
      - percona-postgresql{{ postgres_version }}-server
      - percona-postgresql{{ postgres_version }}-test
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: Initialize Postgres RHEL
    become: true
    command: /usr/pgsql-{{ major_version }}/bin/postgresql-{{ major_version }}-setup initdb
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  - name: Install Development tools
    become: true
    command: yum -y groupinstall "Development tools"
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_distribution_major_version != "7"

  - name: Enable llvm-toolset dnf module for RHEL8
    become: true
    command: dnf module enable llvm-toolset -y
    when: ansible_distribution_major_version == "8"

  - name: Install llvm-toolset
    become: true
    command: yum install -y llvm-toolset
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_distribution_major_version != "7"

  - name: Clone pg_tde sources
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/pg_tde
    vars:
      repo: "{{ lookup('env', 'TDE_REPO') }}"
      version: "{{ lookup('env', 'TDE_BRANCH') }}"
    become_user: postgres

  - name: configure pg_tde from sources
    shell: ./configure
    args:
      chdir: "/tmp/pg_tde"

  - name: Build pg_tde from sources
    make:
      chdir: "/tmp/pg_tde"
      params:
        USE_PGXS: 1

  - name: Install pg_tde from sources
    make:
      target: install
      chdir: "/tmp/pg_tde"
      params:
        USE_PGXS: 1
    when: not use_package_install

  - name: Install pg-tde RHEL RPM Package
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
        - percona-pg_tde{ major_version }}
    when: use_package_install

  - name: Add extensions to postgresql.conf for RHEL
    lineinfile:
      path: /var/lib/pgsql/{{ major_version }}/data/postgresql.conf
      line: shared_preload_libraries = 'pg_tde'

  - name: Restart Postgres RHEL
    service:
      name: postgresql-{{ major_version }}
      state: restarted
    register: out

  - name: Start Postgres RHEL
    service:
      name: postgresql-{{ major_version }}
      state: started
      enabled: yes
